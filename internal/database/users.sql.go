// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const changeEmail = `-- name: ChangeEmail :exec
UPDATE users
SET email = $2
WHERE username = $1
`

type ChangeEmailParams struct {
	Username string
	Email    string
}

func (q *Queries) ChangeEmail(ctx context.Context, arg ChangeEmailParams) error {
	_, err := q.db.ExecContext(ctx, changeEmail, arg.Username, arg.Email)
	return err
}

const changePass = `-- name: ChangePass :exec
UPDATE users
SET hashed_password = $2
WHERE email = $1
`

type ChangePassParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) ChangePass(ctx context.Context, arg ChangePassParams) error {
	_, err := q.db.ExecContext(ctx, changePass, arg.Email, arg.HashedPassword)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, email, hashed_password, created_at, updated_at, is_admin)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING id, username, email, hashed_password, created_at, updated_at, is_admin
`

type CreateUserParams struct {
	ID             uuid.UUID
	Username       string
	Email          string
	HashedPassword string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	IsAdmin        bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsAdmin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
	)
	return i, err
}

const getPassHash = `-- name: GetPassHash :one
SELECT id, username, email, hashed_password, created_at, updated_at, is_admin from users
WHERE email = $1
`

func (q *Queries) GetPassHash(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getPassHash, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, hashed_password, created_at, updated_at, is_admin FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, username, email, hashed_password, created_at, updated_at, is_admin FROM users
WHERE username = $1
`

func (q *Queries) GetUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
	)
	return i, err
}
