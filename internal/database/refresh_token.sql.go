// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_token.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Token     string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.Token,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.ExpiresAt,
		arg.RevokedAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getResponseToken = `-- name: GetResponseToken :one
SELECT expires_at, token, user_id, revoked_at
FROM refresh_tokens
WHERE token = $1
`

type GetResponseTokenRow struct {
	ExpiresAt time.Time
	Token     string
	UserID    uuid.UUID
	RevokedAt sql.NullTime
}

func (q *Queries) GetResponseToken(ctx context.Context, token string) (GetResponseTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getResponseToken, token)
	var i GetResponseTokenRow
	err := row.Scan(
		&i.ExpiresAt,
		&i.Token,
		&i.UserID,
		&i.RevokedAt,
	)
	return i, err
}

const revokeToken = `-- name: RevokeToken :one
UPDATE refresh_tokens
SET revoked_at = $2,
updated_at = $3
WHERE token = $1
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type RevokeTokenParams struct {
	Token     string
	RevokedAt sql.NullTime
	UpdatedAt time.Time
}

func (q *Queries) RevokeToken(ctx context.Context, arg RevokeTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, revokeToken, arg.Token, arg.RevokedAt, arg.UpdatedAt)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}
