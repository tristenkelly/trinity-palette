// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: items.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (id, product_name, product_description, price, in_stock, updated_at, image_url)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING id, product_name, product_description, price, in_stock, updated_at, image_url
`

type CreateItemParams struct {
	ID                 uuid.UUID
	ProductName        string
	ProductDescription string
	Price              int32
	InStock            bool
	UpdatedAt          time.Time
	ImageUrl           string
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.ID,
		arg.ProductName,
		arg.ProductDescription,
		arg.Price,
		arg.InStock,
		arg.UpdatedAt,
		arg.ImageUrl,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.ProductDescription,
		&i.Price,
		&i.InStock,
		&i.UpdatedAt,
		&i.ImageUrl,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items 
WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteItem, id)
	return err
}

const getItems = `-- name: GetItems :many
SELECT id, product_name, product_description, price, in_stock, image_url FROM items
`

type GetItemsRow struct {
	ID                 uuid.UUID
	ProductName        string
	ProductDescription string
	Price              int32
	InStock            bool
	ImageUrl           string
}

func (q *Queries) GetItems(ctx context.Context) ([]GetItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetItemsRow
	for rows.Next() {
		var i GetItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.ProductDescription,
			&i.Price,
			&i.InStock,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetItems = `-- name: ResetItems :exec
TRUNCATE items
`

func (q *Queries) ResetItems(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetItems)
	return err
}
